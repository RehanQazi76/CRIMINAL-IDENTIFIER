TextEditingController name = TextEditingController();
TextEditingController DoB = TextEditingController();
TextEditingController crime = TextEditingController();
TextEditingController CHistory = TextEditingController();
var _formKey = GlobalKey<FormState>();
addData(name ,DoB,crime,CHistory) {
  Map<String, dynamic> demodata = {
    "name": name,
    "Date of birth": DoB,
    "crime": crime,
    "criminal history": CHistory,
  };
  CollectionReference collectionReference =
      FirebaseFirestore.instance.collection('Database');
  collectionReference.add(demodata);
}

fetchData() {
  CollectionReference collectionReference =
      FirebaseFirestore.instance.collection('Database');
  collectionReference.snapshots().listen((snapshot) {
    setState(() {
      Map<String, dynamic> Database = snapshot.docs[0].data();
    });
  });
}

@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: const Text('welcome '),
      actions: <Widget>[
        ElevatedButton.icon(onPressed: (){}, icon: Icon(Icons.person), label: Text("logout"))
      ],
    ),
    body: Form(
      key: _formKey,
      child: Padding(
        padding: const EdgeInsets.all(5),
        child: ListView(
          children: <Widget>[
            Padding(
              padding: const EdgeInsets.all(10),
              child: TextFormField(
                keyboardType: TextInputType.name,
                controller: name,
                decoration: InputDecoration(
                    labelText: 'Name ',
                    hintText: 'name of the suspect/criminal',
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(5.0))),
              ),
            ),
            Padding(
              padding: EdgeInsets.all(5),
              child: TextFormField(
                keyboardType: TextInputType.datetime,
                controller: DoB,
                decoration: InputDecoration(
                    labelText: 'Date of Birth ',
                    hintText: 'DD/MM/YYYY',
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(5.0))),
              ),
            ),
            Padding(
              padding: EdgeInsets.all(5),
              child: TextFormField(
                controller: crime,
                keyboardType: TextInputType.text,
                decoration: InputDecoration(
                    labelText: 'crime ',
                    hintText: 'latest crime done',
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(5.0))),
              ),
            ),
            Padding(
              padding: EdgeInsets.all(5),
              child: TextFormField(
                maxLines: 5,
                controller: CHistory,
                keyboardType: TextInputType.text,
                decoration: InputDecoration(
                    labelText: 'Criminal history ',
                    hintText: 'crimal history, last seen location ',
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(5.0))),
              ),
            ),
            Padding(
              padding: EdgeInsets.only(
                top: 10,
                bottom: 15,
              ),
              child: Center(
                  child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        primary: CupertinoColors.black,
                        onPrimary: CupertinoColors.white,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 25, vertical: 20),
                      ),
                      child: const Text('Inset data '),
                      onPressed: () {
                        setState(() {
                          // _insertinfo();
                          addData(name ,DoB,crime,CHistory);
                        });
                      })),
            ),
            Padding(
              padding: EdgeInsets.only(
                top: 10,
                bottom: 15,
              ),
              child: Center(
                  child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        primary: CupertinoColors.black,
                        onPrimary: CupertinoColors.white,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 40, vertical: 20),
                      ),
                      child: const Text('view '),
                      onPressed: fetchData)),
            ),
          ],
        ),
      ),
    ),
  );
}
}

****************display*************
import 'package:fluttertoast/fluttertoast.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:criminal_identifier/screens/upload.dart';
import 'package:criminal_identifier/services/database.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class display extends StatefulWidget {
  @override
  _displayState createState() => _displayState();
}

class _displayState extends State<display> {
  TextEditingController Uid = TextEditingController();
  bool isClicked = false;
   var db = FirebaseFirestore.instance.collection("user");
  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: const Text('welcome '),
          actions: <Widget>[
            ElevatedButton.icon(
                onPressed: () {},
                icon: Icon(Icons.person),
                label: Text("logout"))
          ],
        ),
        body: ListView(children: [
          Padding(
            padding: const EdgeInsets.all(10),
            child: TextFormField(
              keyboardType: TextInputType.text,
              controller: Uid,
              decoration: InputDecoration(
                  labelText: 'Uid',
                  hintText: 'enter a unique Uid',
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(5.0))),
            ),
          ),
          Padding(
            padding: EdgeInsets.only(
              top: 10,
              bottom: 15,
            ),
            child: Center(
              child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    primary: CupertinoColors.black,
                    onPrimary: CupertinoColors.white,
                    padding: const EdgeInsets.symmetric(
                        horizontal: 40, vertical: 20),
                  ),
                  child: const Text('search '),
                  onPressed: () {
                    setState(() {
                      isClicked = true;
                    });
                  }),
            ),
          ),
          isClicked? StreamBuilder<QuerySnapshot>(
        stream: db.where("Uid", isEqualTo: Uid.text).snapshots(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return Center(
              child: CircularProgressIndicator(),
            );
          } else {
            return SingleChildScrollView(
              child: ListView(
                children: snapshot.data!.docs.map((doc) {
                  return ListView(
                    children: [
                      Text(doc.data()['name']),
                      Text(doc.data()['DateOfBirth']),
                      Text(doc.data()['crime']),
                      Text(doc.data()['criminalHistory']),
                    ],
                  );
                }).toList(),
              ),
            );
          }
        },
      )
    :Container()
        ]));
  }
  
}
Text(doc.data()['name']),
                      Text(doc.data()['DateOfBirth']),
                      Text(doc.data()['crime']),
                      Text(doc.data()['criminalHistory'])